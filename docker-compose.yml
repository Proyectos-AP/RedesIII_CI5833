# docker-composer para el contenedor del vendedor.
#
# Este archivo contiene las directivas necesarias para crear un servicio web
# constituido por una aplicación en Django y con servicio NGINX (próximamente)
#
# Autores: Fernando Pérez, Alejandra Cordero, Pablo Maldonado

# Referencias: https://github.com/juggernaut/nginx-flask-postgres-docker-compose-example/blob/master/docker-compose.yml

# Versión del archivo de docker-composer
version: '3'

# Definición de los servicios que se expondrán.
services:
  # Como se usa SQLite, no es necesario establecer un servicio db.

  #El servicio nginx configura nginx como servidor proxy para pasarle los
  #request a cada contenedor de aplicación.
  nginx:
    image: "nginx:1.13.5"
    ports:
      - "8080:80"
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
    # links:
    #   - web:web
    # Expresa dependencia de nginx con el resto. Significa que nginx se ejecutará
    # solamente cuando vendedor_web y banco_cliente_web estén iniciados.
    networks:
      - web_nw
    depends_on:
      - vendedor_web

  # El servicio 'vendedor_web' es quien contendrá la aplicación en Django y quien será
  # expuesta.
  vendedor_web:
    # Para exponer la aplicación debe hacerse un build según el 'dockerfile'
    # Aquí se dice en cuál carpeta está el dockerfile.
    build: ./vendedor/
    # Dice que imagen de docker se utilizará para hacer el build.
    # image: fernandobperezm/proyecto-redes3-vendedor:1.0
    # El comando que se ejecutará al hacer deploy de la app.
    # command: bash -c "python3 ./ecommerce/manage.py runserver 0.0.0.0:5090"
    # Qué path del host (XX) se debe montar en que path del contenedor (YY) (XX:YY)
    volumes:
      - ./vendedor:/vendedor
    networks:
      - web_nw
    # El puerto XX dentro del host se mapeará YY en el contenedor (XX:YY) y viceversa
    # ports:
    #   - "8000:8000"
    # Qué puerto es visible para otros contenedores dentro de este contenedor.
    # expose:
    #   - "5090"
    # Que archivo debe ejecutarse antes de ejecutar command:
    # entrypoint: /entrypoint.sh

  # El servicio 'vendedor_web' es quien contendrá la aplicación en Django y quien será
  # expuesta.
  # banco_cliente_web:
  #   # Para exponer la aplicación debe hacerse un build según el 'dockerfile'
  #   # Aquí se dice en cuál carpeta está el dockerfile.
  #   build: ./banco-cliente
  #   # Dice que imagen de docker se utilizará para hacer el build.
  #   # image: fernandobperezm/proyecto-redes3-vendedor:1.0
  #   # El comando que se ejecutará al hacer deploy de la app.
  #   command: python3 ./bancoCliente/manage.py runserver 0.0.0.0:8100
  #   # Cuando hayan cambios en la carpeta actual, a donde mandarlos dentro del contenedor.
  #   volumes:
  #     - ./banco-cliente:/banco-cliente
  #   # El puerto XX dentro del host se mapeará YY en el contenedor (XX:YY) y viceversa
  #   ports:
  #     - "8100:8100"
  #   # Que archivo debe ejecutarse antes de ejecutar command:
  #   entrypoint: /entrypoint.sh
  #   # Qué puerto es visible para otros contenedores dentro de este contenedor.
  #   expose:
  #     - "8100"

networks:
  web_nw:
    driver: bridge
